#[4.9]様々な繰り返し処理
#配列とeachメソッドの組み合わせはRubyにおける繰り返し処理の代表例ですが、Rubyには繰り返し処理を行う方法が他にもたくさんあります。
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#[4.9.1]timesメソッド
#配列を使わず、単純にn回処理を繰り返したい、という場合はIntegerクラスのtimesメソッドを使うと便利です。

  sum = 0
  # 処理を5回繰り返す。nには0, 1, 2, 3, 4が入る
  5.times { |n| sum += n }
  puts sum
  # ==> 10

#不要であればブロック引数は省略しても構いません。

  sum = 0
  # sumに1を加算する処理を5回繰り返す
  5.times { sum += 1}
  puts sum
  # ==> 5

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#[4.9.2]uptoメソッドとdowntoメソッド
#nからmまで数値を1つずつ増やしながら何か処理をしたい場合は、Integerクラスのuptoメソッドを使いましょう。

  a = []
  10.upto(14) { |n| a << n }
  puts a
  # ==> [10, 11, 12, 13, 14]

#逆に数値を減らしていきたい場合はdowntoメソッドを使います。

  a = []
  14.downto(10) { |n| a << n }
  puts a
  # ==> [14, 13, 12, 11, 10]

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#[4.9.3]stepメソッド
#1, 3, 5, 7のように、nからmまで数値をx個ずつ増やしながら何かを処理したい場合は、Numeicクラスのstepメソッドを使います。
#stepメソッドは次のような仕様になっています。

  開始値.step(上限値, １度に増減する大きさ)

# EX 1から10まで2ずつ値を増やしながら処理をしたい場合
  a = []
  1.step(10, 2) { |n| a << n }
  puts a
  # ==> [1, 3, 5, 7, 9]

# EX 10から1まで2ずつ値を減らす場合
  a = []
  10.step(1, -2) { |n| a << n }
  puts a
  # ==> [10, 8, 6, 4, 2]

#----------------------------------------------------------------------------------------------------------------------------------------------------------------