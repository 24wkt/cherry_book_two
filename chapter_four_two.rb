#[4.2]配列
#配列とは複数のデータをまとめて格納できるオブジェクトのことです。
#配列内のデータ(要素)は順番に並んでいて、添字(インデックス)を指定することでそのデータを取り出すことができます。
#配列は次のように[]を使って作成します(配列リテラル)

# EX 空の配列を作る
  []

# EX 3つの要素が格納された配列を作る
  [要素1, 要素2, 要素3]

#配列はArrayクラスのオブジェクトになっています。
#「Arrayクラス」とは配列オブジェクトの元になっているクラスのことです。

# EX からの配列を作成してそのクラス名を確認する
  puts [].class   # ==> Array

# EX 数値の１、２、３が格納された配列を変数aに代入するコード
# ==> 下記のように２通りの書き方ができる。
  a = [1, 2, 3]

  a = [
        1,
        2,
        3
  ]


#配列は数値に限らず、どんなオブジェクトでも格納できます。
# EX 文字列を格納する。
  a = ['apple', 'orange', 'melon']

#また、異なるデータ型を格納することもできます。
# EX 数値と文字列を混在させた配列を格納する
  a = ['apple', 1, 'orange', 2, 'melon', 3]

#配列に配列を含めることもできます。
# EX
  a = [[10, 20, 30], [40, 50, 60], [70,80,90]]

#配列の各要素を取得する場合は、[]添字(数値)を使います。最初の添字は０です。

  a = [1, 2, 3]
  #1つ目の要素の取得
  puts a[0]   # ==> 1
  #2つ目の要素の取得
  puts a[1]   # ==> 2
  #3つ目の要素の取得
  puts a[2]   # ==> 3

#存在しない要素を指定してもエラーにはならず、nilが返ります。

  a = [1, 2, 3]
  puts a[100]    # ==> nil

#sizeメソッド(エイリアスメソッドはlength)を使うと配列の長さ(要素の個数)を取得できます。

  a = [1, 2, 3]
  puts a.size     # ==> 3
  puts a.length   # ==> 3

#[4.2.1]要素の変更、追加、削除
#次のように添字を指定して値を代入すると、指定した要素を変更することができます。

  配列[添字] = 新しい値

# EX 2番目の要素を20に変更する
  a = [1, 2, 3]
  a[1] = 20
  puts a    # ==> a = [1, 20, 3]

#元の大きさよりも大きい添字を指定すると、間の値がnilで埋められます。
# EX 元の大きさが３の配列に対して、5番目の要素を設定した場合
  a = [1, 2, 3]
  a[4] = 50
  puts a    # ==> a = [1, 2, 3, , 50]

# 「<<」を使うと配列の最後に要素を加えることができる。
  a = []
  a << 1
  a << 2
  a << 3
  puts a    # ==> a = [1, 2, 3]

#配列内の特定の位置にある要素を削除したい場合は「delete_atメソッド」を使います。
# EX 2番目の要素を削除する(削除した値が戻り値になる)
  a = [1, 2, 3]
  a.delete_at(1)
  puts a    # ==> a = [1, 3]※nilになるのではなく要素が一つずつズレる
  puts a[1]

# EX 存在しない添字を指定するとnilが返る
  a.delete_at(100)    # ==> nil
  puts a              # ==> a = [1, 3]

#[4.2.2]配列を使った多重代入
#第2章では変数を多重代入する方法を紹介しました。

  a,b = [1, 2]
  puts a    # ==> 1
  puts b    # ==> 2

# ==> 右辺に配列を置いた場合も同じように多重代入することができます。

# EX 配列を使って多重代入する
  a,b = [1, 2]
  puts a    # ==> 1
  puts b    # ==> 2

# EX 右辺の数が少ない場合はnilが入る
  c,d = [10]
  puts c    # ==> 10
  puts d    # ==> nil

# EX 右辺の数が多い場合ははみ出した値が切り捨てられる
  e,f = [100, 200, 300]
  puts e    # ==> 100
  puts f    # ==> 200

#配列の多重代入は便利に使える場合があります。
#例えば、Rubyには割り算の商と余りを配列として返す「divmodメソッド」があります。
#こういったメソッドの場合、配列で受け取るよりも多重代入を使って最初から別々の変数に入れたほうがスッキリしたコードになります。

  #divmodは商と余りを配列に返す
  puts 14.divmod(3)   # ==> [4,2]

  #戻り値を配列のまま受け取る
  quo_rem = 14.divmod(3)
  puts "商=#{quo_rem[0]}, 余り=#{quo_rem[1]}"   # ==> 商=4, 余り=2

  #多重代入で別々に変数として受け取る
  quotient, remainder = 14.divmod(3)
  puts "商=#{quotient}, 余り=#{remainder}"    # ==> 商=4, 余り=2　　　　　