#[4.3]ブロック
#ブロックはメソッドの引数として渡すことができる処理のかたまりです。
#ブロック内で記述した処理は必要に応じてメソッドから呼び出されます。最初はわかりづらいので他の言語と比較しながらRubyのブロックを理解していきましょう。

#[4.3.1]参考：Javaの繰り返し処理
# EX Javaの繰り返し処理
  int nunmber[] = {1, 2, 3, 4};
  int sum = 0;
  for (int i = 0; i < numbers.length; i++) {
      sum += numbers[i];
  }
  system.out.println(sum);  # ==> 10

  #C言語でも同じような構文を使うので、この形式に見慣れている方も多いかもしれません。ここではプログラマがコンピュータに対して次のような処理を明示的に命令しています。

  # ①変数iを０で初期化しろ  (int i = 0)
  # ②ループが1回終わるごとにiの値を1増やす  (i++)
  # ③配列numbersに入っているi番目の値を取り出せ (numbers[i])
  # ④変数sumに取り出した値を加算しろ  (sum += numbers[i])
  # ⑤iが配列numbersの長さよりも小さい間は②〜④の処理を繰り返せ (i < numbers.length)

# EX J2SE 5.0以降では次のような構文(拡張forループ)で配列処理ができる
  int number[] = {1, 2, 3, 4}
  int sum = 0;
  for (int n: number) {
    sum += n;
  }
  system.out.prinln(sum)  # ==> 10

  #この構文ではコンピュータに対する命令がかなり減っています。

  # ①配列numbersの値を順番に変数nに格納しろ  (for (int n: number))
  # ②変数sumに変数nの値を加算しろ (sum += n)

#ここではJavaを例にあげましたが、その他の言語でもforやforeachといった構文をよく見かけます。では、Rubyの場合はどうなのでしょうか？