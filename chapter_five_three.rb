#[5.3]シンボル
#Rubyにおける「シンボル」とは何でしょうか？公式ドキュメントでは次のように説明されています。

# シンボルを表すクラス。シンボルは任意の文字列と一対一に対応するオブジェクトです。
# 文字列の代わりに用いることもできますが、必ずしも文字列と同じ振る舞いをするわけではありません。
# 同じ内容のシンボルは必ず同一のオブジェクトです。

#シンボルと文字列は見た目にはよく似ています。
#ですが、両者は基本的に別物です。実際のコードを見ながら確認していきましょう。
#シンボルは次のようにコロン(:)に続けて任意の名前を定義します(シンボルリテラル)。

  :シンボルの名前

# EX シンボルを作成するコード
  :apple
  :japan
  :ruby_is_fun

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#[5.3.1]
#シンボルの特徴と文字列の違いを説明していきます。
#まず、シンボルはsymbolクラスのオブジェクトになります。文字列はstringクラスのオブジェクトです。

  puts :apple.class
  # ==> Symbol
  puts 'apple'.class
  # ==> String

#シンボルはRubyの内部で整数として管理されます。表面的には文字列と同じように見えますが、その中身は整数なのです。
#そのため、2つの値が同じかどうか調べる場合、文字列よりも高速に処理ができます。

  # 文字列よりもシンボルの方が高速に比較できる
  'apple' == 'apple'
  :apple == :apple

#次にシンボルは「同じシンボルであれば同じオブジェクトである」という特徴があります。
#このため、「大量の同じ文字列」と「大量の同じシンボル」を作成した場合、シンボルの方がメモリの使用効率がよくなります。
#全く同じオブジェクトであるかどうかはobject_idを調べるとわかります。
#同じ文字列を複数作った場合のobject_idを確認してみましょう。

  puts :apple.object_id   # ==> 1055388
  puts :apple.object_id   # ==> 1055388
  puts :apple.object_id   # ==> 1055388

  puts 'apple'.object_id  # ==> 70099407144660
  puts 'apple'.object_id  # ==> 70099407144520
  puts 'apple'.object_id  # ==> 70099407144660

#ご覧の通り、シンボルは全て同じIDになりますが、文字列が3つとも異なるIDになります。
#最後に、シンボルはイミュータブルなオブジェクトです。
#文字列のように破滅的な変更はできないため、「何かに名前をつけたい。名前なので誰かによって勝手に変更されては困る」という用途に向いています。

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------
#[5.3.2]シンボルの特徴と主な用途
#シンボルの特徴をまとめると次のようになります。

# ・表面上は文字列っぽいので、プログラマにとって理解しやすい。
# ・内部的には整数なので、コンピュータは高速に値を比較できる。
# ・同じシンボルは同じオブジェクトであるため、メモリの使用効率が良い。
# ・イミュータブルなので、勝手に変えられる心配がない。

#シンボルがよく使われるのは、ソースコード上では名前を識別できるようにしたいが、その名前が必ずしも文字列である必要はない場合です。
#代表的な利用例はハッシュのキーです。ハッシュのキーにシンボルを使うと、文字列よりも高速に値を取り出すことができます。

# EX ハッシュをキーにする
  currencies = { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee' }
  puts currencies['japan']
  # ==> 'yen' [Done] exited with code=0 in 0.256 seconds

 # EX シンボルをハッシュにする
  currencise = { :japan => 'yen', :us => 'dollar', :india => 'rupee' }
  # シンボルを使って値を取り出す(文字列より高速)
  puts currencise[:japan]
  # ==> yen [Done] exited with code=0 in 0.112 seconds

#他にもオブジェクトが持っているメソッド名がシンボルで管理されていたりします。
#例えば、次のようにするとそのオブジェクトが持っているメソッド名がシンボルの配列になって返ってきます。
  puts 'apple'.methods
  # ==> encode, encode!, unpack, unpack1, include? .... 以下省略

  puts :apple.methods
  # ==> match, match?, to_sym, <=>, to_proc ... 以下省略

#シンボルはこの後にもたくさん登場するので、Rubyがどういう用途でシンボルを使っているのか注目してみてください。
#シンボルについてはこれぐらいの内容を理解しておけば、一旦はで以上です。

#------------------------------------------------------------------------------------------------------------------------------------------------------------------------