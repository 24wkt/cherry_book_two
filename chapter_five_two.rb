#[5.2]ハッシュ
#ハッシュはキーと値の組み合わせでデータを管理するオブジェクトのことです。他の言語では連想配列やディクショナリ(辞書)、マップと呼ばれたりする場合があります。
#ハッシュを作成する場合は以下のような構文(ハッシュリテラル)を使います。

# EX 空のハッシュを作る
  {}

  # キーと値の組み合わせを3つ格納するハッシュ
  { キー1 => 値1, キー2 => 値2, キー3 => 値3}

#ハッシュはHashクラスのオブジェクトになっています。

# EX 空のハッシュを作成し、そのクラス名を確認する
  puts {}.class
  # ==> Hash

# EX 国ごとに通貨の単位を格納したハッシュ
  { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee'}

  # 改行も可能！
  {
    'japan' => 'yen',
    'us' => 'dollar',
    'india' => 'rupee'
  }

  # 配列の最後にカンマがついてもエラーにはなりません
  {
    'japan' => 'yen',
    'us' => 'dollar',
    'india' => 'rupee',  #
  }

#同じキーが複数使われた場合は、最後に出てきた値が有効になります。
#ですが、特別な理由がない限りこのようなハッシュを作成する意味はありません。むしろ不具合である可能性の方が高いでしょう。

  { 'japan' => 'yen', 'japan' => '円'}
  # ==> { 'japan' => 'yen'}

#ハッシュリテラルで使う{}はブロックで使う{}([4.3.5]do...endと{}の項を確認)と使っている記号が同じです。

# EX ハッシュリテラルの{}
  h = { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee'}

# EX ブロックを作成する
  [1, 2, 3].each { |n| puts n}

#慣れないうちはハッシュの{}とブロックの{}の見分けがつきにくいかもしれませんが、Rubyのコードをたくさん読み書きするうちにパッと見分けがつくようになってくるはずです。
#とはいえ、書き方を謝るとRuby自身がハッシュの{}とブロックの{}を取り違えてしまうケースもあります。(そのケースはおって学習します。)

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#[5.2.1]要素の追加、変更、取得
#後から新しいキーと値を追加する場合は、次のような構文を使います。

  ハッシュ[キー] = 値

# EX 新たにイタリアの通貨を追加するコード
  currencies = { 'japan' => 'yen', 'us' => 'dollar', 'indian' => 'rupee' }

  # イタリアの通貨を追加する
  currencies['italy'] = 'euro'
  puts currencies
  # ==> {"japan"=>"yen", "us"=>"dollar", "indian"=>"rupee", "italy"=>"euro"}

# EX 既にコードが存在していた場合は、値が上書きされます。
  currencies = { 'japan' => 'yen', 'us' => 'dollar', 'indian' => 'rupee' }

  # 既存の値を上書きする
  currencies['japan'] = '円'
  puts currencies
  # ==> {"japan"=>"円", "us"=>"dollar", "indian"=>"rupee"}

#ハッシュから値を取り出す場合は、次のようなキーを指定します。

  ハッシュ[キー]

#ハッシュはその内部構造上、キーと値が大量に格納されている場合でも、指定したキーに対応する値を高速に取り出せるのが特徴です。
# EX ハッシュから値を取り出す
  currencies = { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee' }
  puts currencies['india']
  # ==> rupee

  # 存在しないキーを指定するとnilが返ります。
  puts currencies['brazil']
  # ==> nil

#------------------------------------------------------------------------------------------------------------------------------------------------------------------
#[5.2.2]ハッシュを使った繰り返し
#eaxhメソッドを使うと、キーと値の組み合わせを順に取り出すことができます。
#キーと値は格納した順に取り出されます。ブロック引数がキーと値で2個になっている点に注意してください。

  currencies = { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee' }

  currencies.each do |key, value|
    puts "#{key} : #{value}"
  end
  # ==> japan : yen
  #     us : dollar
  #     india : rupee

#ブロック引数を1つにするとキーと値が配列に格納されます。

  currencies = { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee' }

  currencies.each do |key_value|
    key = key_value[0]
    value = key_value[1]
    puts "#{key} : #{value}"
  end
  # ==> japan : yen
  #     us : dollar
  #     india : rupee

#------------------------------------------------------------------------------------------------------------------------------------------------------------------