#[5.2]ハッシュ
#ハッシュはキーと値の組み合わせでデータを管理するオブジェクトのことです。他の言語では連想配列やディクショナリ(辞書)、マップと呼ばれたりする場合があります。
#ハッシュを作成する場合は以下のような構文(ハッシュリテラル)を使います。

# EX 空のハッシュを作る
  {}

  # キーと値の組み合わせを3つ格納するハッシュ
  { キー1 => 値1, キー2 => 値2, キー3 => 値3}

#ハッシュはHashクラスのオブジェクトになっています。

# EX 空のハッシュを作成し、そのクラス名を確認する
  puts {}.class
  # ==> Hash

# EX 国ごとに通貨の単位を格納したハッシュ
  { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee'}

  # 改行も可能！
  {
    'japan' => 'yen',
    'us' => 'dollar',
    'india' => 'rupee'
  }

  # 配列の最後にカンマがついてもエラーにはなりません
  {
    'japan' => 'yen',
    'us' => 'dollar',
    'india' => 'rupee',  #
  }

#同じキーが複数使われた場合は、最後に出てきた値が有効になります。
#ですが、特別な理由がない限りこのようなハッシュを作成する意味はありません。むしろ不具合である可能性の方が高いでしょう。

  { 'japan' => 'yen', 'japan' => '円'}
  # ==> { 'japan' => 'yen'}

#ハッシュリテラルで使う{}はブロックで使う{}([4.3.5]do...endと{}の項を確認)と使っている記号が同じです。

# EX ハッシュリテラルの{}
  h = { 'japan' => 'yen', 'us' => 'dollar', 'india' => 'rupee'}

# EX ブロックを作成する
  [1, 2, 3].each { |n| puts n}

#慣れないうちはハッシュの{}とブロックの{}の見分けがつきにくいかもしれませんが、Rubyのコードをたくさん読み書きするうちにパッと見分けがつくようになってくるはずです。
#とはいえ、書き方を謝るとRuby自身がハッシュの{}とブロックの{}を取り違えてしまうケースもあります。(そのケースはおって学習します。)

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------